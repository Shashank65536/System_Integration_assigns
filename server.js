const express = require('express');
const mariadb = require('mariadb');
const swaggerJsdoc = require("swagger-jsdoc");
const swaggerUi = require("swagger-ui-express");
const app = express();
const port = 3000;
const cors = require('cors');
app.use(express.json());


// Create a MariaDB pool
const pool = mariadb.createPool({
  host: 'localhost',
  user: 'root',
  password: 'root',
  database: 'sample',
  port: 3306,
  connectionLimit: 10,
});

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Personal Apis',
      version: '1.0.0',
      description:'CRUD operation apis generated by node server'
    },
    host: 'localhost:3000',
    basePath: '/'
  },
  apis: ['./server.js'], // files containing annotations as above
};

const specs = swaggerJsdoc(options);
app.use(
  "/docs",
  swaggerUi.serve,
  swaggerUi.setup(specs)
);	
app.use(cors());


/**
 * @swagger
 * /agents:
 *   get:
 *     summary: Get a list of agents
 *     description: Retrieve a list of all agents.
 *     responses:
 *       200:
 *         description: A list of agents
 */
app.get('/agents', async (req, res) => {
  try {
   
    const connection = await pool.getConnection();
    const rows = await connection.query('SELECT * FROM agents');
    connection.release();
    res.json(rows);
  } catch (err) {
    console.error('Error executing SQL query:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});


/**
 * @swagger
 * /company:
 *   get:
 *     summary: Get a list of companies
 *     description: Retrieve a list of all companies.
 *     responses:
 *       200:
 *         description: A list of companies
 */
app.get('/company', async (req, res) => {
  try {
   
    const connection = await pool.getConnection();
    const rows = await connection.query('SELECT * FROM company');
    connection.release();
    res.json(rows);
  } catch (err) {
    console.error('Error executing SQL query:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

/**
 * @swagger
 * /customer:
 *   get:
 *     summary: Get a list of customers
 *     description: Retrieve a list of all customers.
 *     responses:
 *       200:
 *         description: A list of customers
 */
app.get('/customer', async (req, res) => {
  try {
  
    const connection = await pool.getConnection();
    const rows = await connection.query('SELECT * FROM customer');
    connection.release();
    res.json(rows);
  } catch (err) {
    console.error('Error executing SQL query:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

/**
 * @swagger
 * /company:
 *   post:
 *     summary: Create a new company.
 *     description: Create a new company with the provided data.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/NewCompany'
 *     responses:
 *       201:
 *         description: Company created successfully
 *       400:
 *         description: Bad request, invalid input data
 * components:
 *   schemas:
 *     NewCompany:
 *       type: object
 *       required:
 *         - company_name
 *         - company_city
 *       properties:
 *         company_id:
 *           type: integer
 *           description: The company ID
 *         company_name:
 *           type: string
 *           description: The company name
 *         company_city:
 *           type: string
 *           description: The city where the company is located
 *       example:
 *         company_id: 1223
 *         company_name: "abcd"
 *         company_city: "Charlotte"
 */

app.post('/company', async (req, res) => {
  console.log(req.body);
  try {
    const { company_id, company_name, company_city } = req.body;

   
    if (!company_id || !company_name || !company_city) {
      return res.status(400).json({ error: 'All fields are required' });
    }

 
    const connection = await pool.getConnection();
    const result = await connection.query(
      'INSERT INTO company (COMPANY_ID, COMPANY_NAME, COMPANY_CITY) VALUES (?, ?, ?)',
      [company_id, company_name, company_city]
    );
    connection.release();

    res.status(201).json({ message: 'Company created successfully' });
  } catch (err) {
    console.error('Error creating company:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});


/**
 * @swagger
 * /companies/{id}:
 *   delete:
 *     summary: Delete a company by ID.
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: ID of the company to delete.
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Company deleted successfully.
 *       404:
 *         description: Company not found.
 *       500:
 *         description: Internal server error.
 */
app.delete('/companies/:id', async (req, res) => {
  const companyId = parseInt(req.params.id);

  const connection = await pool.getConnection();
  const deleteQuery = 'DELETE FROM company WHERE COMPANY_ID = ?';

  try {
    
    const result = await connection.query(deleteQuery, [companyId]);

    if (result.affectedRows === 0) {
      res.status(404).json({ error: 'Company not found' });
      return;
    }

    res.json({ message: 'Company deleted successfully' });
  } catch (err) {
    console.error('Error deleting company:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

